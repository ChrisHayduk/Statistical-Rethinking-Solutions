# Chunk 6
d2 <- Howell1
d2 <- d2[d2$age < 18, ]
str(d2)
m2 <- map(
alist(
height ~ dnorm(a + b*weight, sigma),
a ~ dnorm(178, 100),
b ~ dnorm(0, 10),
sigma ~ dunif(0, 50)
), data = d2)
print(m2)
# Chunk 7
#Define sequence of weights to compute predictions for
#These values will be on the horizontal axis
weight.seq <- seq(from = 0, to = 65, by = 1)
#Use link to compute mu for each sample from the posterior
#and for each weight in weight.seq
mu <- link(m2, data=data.frame(weight=weight.seq))
#Summarize the distribution of mu
mu.mean <- apply(mu, 2, mean)
mu.HPDI <- apply(mu, 2, HPDI, prob = 0.89)
#Simulate heights from the posterior
sim.height <- sim(m, data=list(weight=weight.seq))
#Summarize the simulated heights
height.PI <- apply(sim.height, 2, PI, prob=0.89)
#Plot raw data
plot(height ~ weight, d, col=col.alpha(rangi2, 0.5))
#Draw MAP line
lines(weight.seq, mu.mean)
#Draw HPDI region for line
shade(mu.HPDI, weight.seq)
#Draw PI region for simulated heights
shade(height.PI, weight.seq)
# Chunk 8
# Chunk 1
# set the global chunk options
opts_chunk$set(message=FALSE, # don't print R messages in pdf -- CHANGE TO FALSE WHEN SUBMITTING FINAL VERSION!!!
warning=FALSE) # don't print warnings in pdf -- CHANGE TO FALSE WHEN SUBMITTING FINAL VERSION!!!
# load .RData files, .R files, etc.
# R packages required
suppressMessages(library(xtable, quietly=TRUE, warn.conflicts = FALSE,verbose = FALSE))
suppressMessages(library(tidyverse, quietly=TRUE, warn.conflicts = FALSE, verbose=FALSE))
suppressMessages(library(rethinking, quietly=TRUE, warn.conflicts = FALSE, verbose=FALSE))
# Chunk 2
sample_mu <- rnorm(1e4, 0, 10)
sample_sigma <- runif(1e4, 0, 10)
prior_h <- rnorm(1e4, sample_mu, sample_sigma)
dens(prior_h)
# Chunk 3
flist <- alist(
y ~ dnorm(mu, sigma),
mu ~ dnorm(0, 10),
sigma ~ dunif(0, 10)
)
# Chunk 4
flist <- alist(
y ~ dnorm(mu, sigma),
mu <- a +b*x,
a ~ dnorm(0, 50),
b ~ dunif(0, 10),
sigma ~ dunif(0, 50)
)
# Chunk 5
data(Howell1)
d1 <- Howell1
m1 <- map(
alist(
height ~ dnorm(a + b*weight, sigma),
a ~ dnorm(178, 100),
b ~ dnorm(0, 10),
sigma ~ dunif(0, 50)
), data = d1)
weights <- c(46.95, 43.72, 64.78, 32.59, 54.63)
sim.height <- sim(m1, data=list(weight=weights), n = 1e4, silent = TRUE)
mean.height <- apply(sim.height, 2, mean)
print(mean.height)
height.PI <- apply(sim.height, 2, PI, prob=0.89)
print(height.PI)
# Chunk 6
d2 <- Howell1
d2 <- d2[d2$age < 18, ]
str(d2)
m2 <- map(
alist(
height ~ dnorm(a + b*weight, sigma),
a ~ dnorm(178, 100),
b ~ dnorm(0, 10),
sigma ~ dunif(0, 50)
), data = d2)
print(m2)
# Chunk 7
#Define sequence of weights to compute predictions for
#These values will be on the horizontal axis
weight.seq <- seq(from = 0, to = 65, by = 1)
#Use link to compute mu for each sample from the posterior
#and for each weight in weight.seq
mu <- link(m2, data=data.frame(weight=weight.seq))
#Summarize the distribution of mu
mu.mean <- apply(mu, 2, mean)
mu.HPDI <- apply(mu, 2, HPDI, prob = 0.89)
#Simulate heights from the posterior
sim.height <- sim(m2, data=list(weight=weight.seq))
#Summarize the simulated heights
height.PI <- apply(sim.height, 2, PI, prob=0.89)
#Plot raw data
plot(height ~ weight, d, col=col.alpha(rangi2, 0.5))
#Draw MAP line
lines(weight.seq, mu.mean)
#Draw HPDI region for line
shade(mu.HPDI, weight.seq)
#Draw PI region for simulated heights
shade(height.PI, weight.seq)
# Chunk 8
# Chunk 1
# set the global chunk options
opts_chunk$set(message=FALSE, # don't print R messages in pdf -- CHANGE TO FALSE WHEN SUBMITTING FINAL VERSION!!!
warning=FALSE) # don't print warnings in pdf -- CHANGE TO FALSE WHEN SUBMITTING FINAL VERSION!!!
# load .RData files, .R files, etc.
# R packages required
suppressMessages(library(xtable, quietly=TRUE, warn.conflicts = FALSE,verbose = FALSE))
suppressMessages(library(tidyverse, quietly=TRUE, warn.conflicts = FALSE, verbose=FALSE))
suppressMessages(library(rethinking, quietly=TRUE, warn.conflicts = FALSE, verbose=FALSE))
# Chunk 2
sample_mu <- rnorm(1e4, 0, 10)
sample_sigma <- runif(1e4, 0, 10)
prior_h <- rnorm(1e4, sample_mu, sample_sigma)
dens(prior_h)
# Chunk 3
flist <- alist(
y ~ dnorm(mu, sigma),
mu ~ dnorm(0, 10),
sigma ~ dunif(0, 10)
)
# Chunk 4
flist <- alist(
y ~ dnorm(mu, sigma),
mu <- a +b*x,
a ~ dnorm(0, 50),
b ~ dunif(0, 10),
sigma ~ dunif(0, 50)
)
# Chunk 5
data(Howell1)
d1 <- Howell1
m1 <- map(
alist(
height ~ dnorm(a + b*weight, sigma),
a ~ dnorm(178, 100),
b ~ dnorm(0, 10),
sigma ~ dunif(0, 50)
), data = d1)
weights <- c(46.95, 43.72, 64.78, 32.59, 54.63)
sim.height <- sim(m1, data=list(weight=weights), n = 1e4, silent = TRUE)
mean.height <- apply(sim.height, 2, mean)
print(mean.height)
height.PI <- apply(sim.height, 2, PI, prob=0.89)
print(height.PI)
# Chunk 6
d2 <- Howell1
d2 <- d2[d2$age < 18, ]
str(d2)
m2 <- map(
alist(
height ~ dnorm(a + b*weight, sigma),
a ~ dnorm(178, 100),
b ~ dnorm(0, 10),
sigma ~ dunif(0, 50)
), data = d2)
print(m2)
# Chunk 7
#Define sequence of weights to compute predictions for
#These values will be on the horizontal axis
weight.seq <- seq(from = 0, to = 65, by = 1)
#Use link to compute mu for each sample from the posterior
#and for each weight in weight.seq
mu <- link(m2, data=data.frame(weight=weight.seq))
#Summarize the distribution of mu
mu.mean <- apply(mu, 2, mean)
mu.HPDI <- apply(mu, 2, HPDI, prob = 0.89)
#Simulate heights from the posterior
sim.height <- sim(m2, data=list(weight=weight.seq))
#Summarize the simulated heights
height.PI <- apply(sim.height, 2, PI, prob=0.89)
#Plot raw data
plot(height ~ weight, d2, col=col.alpha(rangi2, 0.5))
#Draw MAP line
lines(weight.seq, mu.mean)
#Draw HPDI region for line
shade(mu.HPDI, weight.seq)
#Draw PI region for simulated heights
shade(height.PI, weight.seq)
# Chunk 8
View(mu)
precis(m2)
head(mu)
#Define sequence of weights to compute predictions for
#These values will be on the horizontal axis
weight.seq <- seq(from = 2, to = 65, by = 1)
#Use link to compute mu for each sample from the posterior
#and for each weight in weight.seq
mu <- link(m2, data=data.frame(weight=weight.seq))
#Summarize the distribution of mu
mu.mean <- apply(mu, 2, mean)
mu.HPDI <- apply(mu, 2, HPDI, prob = 0.89)
#Simulate heights from the posterior
sim.height <- sim(m2, data=list(weight=weight.seq))
#Summarize the simulated heights
height.PI <- apply(sim.height, 2, PI, prob=0.89)
#Plot raw data
plot(height ~ weight, d2, col=col.alpha(rangi2, 0.5))
#Draw MAP line
lines(weight.seq, mu.mean)
#Draw HPDI region for line
shade(mu.HPDI, weight.seq)
#Draw PI region for simulated heights
shade(height.PI, weight.seq)
weight.seq
weight.seq <- seq(from = 0, to = 65, by = 1)
weight.seq
View(d2)
mu.mean
View(d2)
#Define sequence of weights to compute predictions for
#These values will be on the horizontal axis
weight.seq <- seq(from = 0, to = 45, by = 1)
#Use link to compute mu for each sample from the posterior
#and for each weight in weight.seq
mu <- link(m2, data=data.frame(weight=weight.seq))
#Summarize the distribution of mu
mu.mean <- apply(mu, 2, mean)
mu.HPDI <- apply(mu, 2, HPDI, prob = 0.89)
#Simulate heights from the posterior
sim.height <- sim(m2, data=list(weight=weight.seq))
#Summarize the simulated heights
height.PI <- apply(sim.height, 2, PI, prob=0.89)
#Plot raw data
plot(height ~ weight, d2, col=col.alpha(rangi2, 0.5))
#Draw MAP line
lines(weight.seq, mu.mean)
#Draw HPDI region for line
shade(mu.HPDI, weight.seq)
#Draw PI region for simulated heights
shade(height.PI, weight.seq)
#Define sequence of weights to compute predictions for
#These values will be on the horizontal axis
weight.seq <- seq(from = 0, to = 50, by = 1)
post <- extract.samples(m2)
mu.link <- function(weight) post$a + post$b*weight
#Use link to compute mu for each sample from the posterior
#and for each weight in weight.seq
mu <- sapply(weight.seq, mu.link)
#Summarize the distribution of mu
mu.mean <- apply(mu, 2, mean)
mu.HPDI <- apply(mu, 2, HPDI, prob = 0.89)
#Simulate heights from the posterior
sim.height <- sim(m2, data=list(weight=weight.seq))
#Summarize the simulated heights
height.PI <- apply(sim.height, 2, PI, prob=0.89)
#Plot raw data
plot(height ~ weight, d2, col=col.alpha(rangi2, 0.5))
#Draw MAP line
lines(weight.seq, mu.mean)
#Draw HPDI region for line
shade(mu.HPDI, weight.seq)
#Draw PI region for simulated heights
shade(height.PI, weight.seq)
??extract.samples
View(post)
??link
Howell1$weight.log <- log(Howell1$weight)
m3 <- map(
alist(
height ~ dnorm(a + b*weight.log, sigma),
a ~ dnorm(178, 100),
b ~ dnorm(0, 100),
sigma ~ dunif(0, 50)
), data = Howell1)
print(m3)
View(Howell1)
Howell1$weight.log <- log(Howell1$weight)
m3 <- map(
alist(
height ~ dnorm(a + b*weight.log, sigma),
a ~ dnorm(178, 100),
b ~ dnorm(0, 100),
sigma ~ dunif(0, 50)
), data = Howell1)
print(m3)
plot(height ~ weight, data = Howell1, col = col.alpha(rangi2,0.4))
#Define sequence of weights to compute predictions for
#These values will be on the horizontal axis
weight.seq <- seq(from = 0, to = 70, by = 1)
#Use link to compute mu for each sample from the posterior
#and for each weight in weight.seq
post <- extract.samples(m3)
mu.link <- function(weight) post$a + post$b*weight
mu <- sapply(weight.seq, mu.link)
#Summarize the distribution of mu
mu.mean <- apply(mu, 2, mean)
mu.HPDI <- apply(mu, 2, HPDI, prob = 0.89)
#Simulate heights from the posterior
sim.height <- sim(m3, data=list(weight=weight.seq))
#Summarize the simulated heights
height.PI <- apply(sim.height, 2, PI, prob=0.89)
#Draw MAP line
lines(weight.seq, mu.mean)
#Draw HPDI region for line
shade(mu.HPDI, weight.seq)
#Draw PI region for simulated heights
shade(height.PI, weight.seq)
plot(height ~ weight, data = Howell1, col = col.alpha(rangi2,0.4))
#Define sequence of weights to compute predictions for
#These values will be on the horizontal axis
weight.seq <- seq(from = 0, to = 70, by = 1)
#Use link to compute mu for each sample from the posterior
#and for each weight in weight.seq
post <- extract.samples(m3)
mu.link <- function(weight) post$a + post$b*log(weight)
mu <- sapply(weight.seq, mu.link)
#Summarize the distribution of mu
mu.mean <- apply(mu, 2, mean)
mu.HPDI <- apply(mu, 2, HPDI, prob = 0.89)
#Simulate heights from the posterior
sim.height <- sim(m3, data=list(weight=weight.seq))
#Summarize the simulated heights
height.PI <- apply(sim.height, 2, PI, prob=0.89)
#Draw MAP line
lines(weight.seq, mu.mean)
#Draw HPDI region for line
shade(mu.HPDI, weight.seq)
#Draw PI region for simulated heights
shade(height.PI, weight.seq)
plot(height ~ weight, data = Howell1, col = col.alpha(rangi2,0.4))
#Define sequence of weights to compute predictions for
#These values will be on the horizontal axis
weight.seq <- seq(from = 1, to = 70, by = 1)
#Use link to compute mu for each sample from the posterior
#and for each weight in weight.seq
post <- extract.samples(m3)
mu.link <- function(weight) post$a + post$b*log(weight)
mu <- sapply(weight.seq, mu.link)
#Summarize the distribution of mu
mu.mean <- apply(mu, 2, mean)
mu.HPDI <- apply(mu, 2, HPDI, prob = 0.89)
#Simulate heights from the posterior
sim.height <- sim(m3, data=list(weight=weight.seq))
#Summarize the simulated heights
height.PI <- apply(sim.height, 2, PI, prob=0.89)
#Draw MAP line
lines(weight.seq, mu.mean)
#Draw HPDI region for line
shade(mu.HPDI, weight.seq)
#Draw PI region for simulated heights
shade(height.PI, weight.seq)
plot(height ~ weight, data = Howell1, col = col.alpha(rangi2,0.4))
#Define sequence of weights to compute predictions for
#These values will be on the horizontal axis
weight.seq <- seq(from = 1, to = 70, by = 1)
#Use link to compute mu for each sample from the posterior
#and for each weight in weight.seq
post <- extract.samples(m3)
mu.link <- function(weight) post$a + post$b*log(weight)
mu <- sapply(weight.seq, mu.link)
#Summarize the distribution of mu
mu.mean <- apply(mu, 2, mean)
mu.HPDI <- apply(mu, 2, HPDI, prob = 0.89)
#Simulate heights from the posterior
sim.height <- sim(m3, data=list(weight.log=log(weight.seq)))
#Summarize the simulated heights
height.PI <- apply(sim.height, 2, PI, prob=0.89)
#Draw MAP line
lines(weight.seq, mu.mean)
#Draw HPDI region for line
shade(mu.HPDI, weight.seq)
#Draw PI region for simulated heights
shade(height.PI, weight.seq)
plot(height ~ weight, data = Howell1, col = col.alpha(rangi2,0.4))
#Define sequence of weights to compute predictions for
#These values will be on the horizontal axis
weight.seq <- seq(from = 1, to = 70, by = 1)
#Use link to compute mu for each sample from the posterior
#and for each weight in weight.seq
post <- extract.samples(m3)
mu.link <- function(weight) post$a + post$b*log(weight)
mu <- sapply(weight.seq, mu.link)
#Summarize the distribution of mu
mu.mean <- apply(mu, 2, mean)
mu.HPDI <- apply(mu, 2, HPDI, prob = 0.97)
#Simulate heights from the posterior
sim.height <- sim(m3, data=list(weight.log=log(weight.seq)))
#Summarize the simulated heights
height.PI <- apply(sim.height, 2, PI, prob=0.97)
#Draw MAP line
lines(weight.seq, mu.mean)
#Draw HPDI region for line
shade(mu.HPDI, weight.seq)
#Draw PI region for simulated heights
shade(height.PI, weight.seq)
library(rethinking)
data(milk)
d <- milk
str(d)
dcc <- d[complete.cases(d), ]
m5.5 <- map(alist(kcal.per.g ~ dnorm(mu, sigma), mu <- a + bn*neocortex.perc, a ~ dnorm(0, 100), bn ~ dnorm(0, 1), sigma ~ dunif(0, 1)), data=dcc)
precis(m5.5, digits = 3)
ceof(m5.5)
coef(m5.5)
np.seq <- 0:100
pred.data <- data.frame(neocortex.perc=np.seq)
mu <- link(m5.5, data = pred.data, n=1e4)
mu.mean <- apply(mu, 2, mean)
mu.PI <- apply(mu, 2, PI)
plot(kcal.per.g ~ neocortex.perc. data=dcc, col=rangi2)
plot(kcal.per.g ~ neocortex.perc. data=dcc, col=rangi2)
plot(kcal.per.g ~ neocortex.perc. data=dcc, col=rangi2)
lines(np.seq, mu.mean)
lines(np.seq, mu.PI[1,], lty = 2)
lines(np.seq, mu.PI[2,], lty=2)
plot(kcal.per.g ~ neocortex.perc, data=dcc, col=rangi2)
lines(np.seq, mu.mean)
lines(np.seq, mu.PI[1,], lty = 2)
lines(np.seq, mu.PI[2,], lty=2)
dcc$log.mass <- log(dcc$mass)
m5.6 <- map(
alist(
kcal.per.g ~ dnorm(mu, sigma),
mu <- a + bm*log.mass,
a ~ dnorm(0, 100),
bm ~ dnorm(0, 1),
sigma ~ dunif(0, 1)
),
data = dcc)
)
precis(m5.6)
dcc$log.mass <- log(dcc$mass)
m5.6 <- map(
alist(
kcal.per.g ~ dnorm(mu, sigma),
mu <- a + bm*log.mass,
a ~ dnorm(0, 100),
bm ~ dnorm(0, 1),
sigma ~ dunif(0, 1)
),
data = dcc)
precis(m5.6)
mu <- link(m5.6, data = pred.data, n=1e4)
mu.mean <- apply(mu, 2, mean)
mu.PI <- apply(mu, 2, PI)
plot(kcal.per.g ~ neocortex.perc, data=dcc, col=rangi2)
lines(np.seq, mu.mean)
lines(np.seq, mu.PI[1,], lty = 2)
lines(np.seq, mu.PI[2,], lty=2)
mu <- link(m5.6, data = pred.data, n=1e4)
mu.mean <- apply(mu, 2, mean)
mu.PI <- apply(mu, 2, PI)
plot(kcal.per.g ~ log.mass, data=dcc, col=rangi2)
lines(np.seq, mu.mean)
lines(np.seq, mu.PI[1,], lty = 2)
lines(np.seq, mu.PI[2,], lty=2)
?seq
log.mass.seq <- seq(from=-3, to = 5, length.out = 100)
pred.data <- data.frame(log.mass=log.mass.seq)
mu <- link(m5.6, data = pred.data, n=1e4)
mu.mean <- apply(mu, 2, mean)
mu.PI <- apply(mu, 2, PI)
plot(kcal.per.g ~ log.mass, data=dcc, col=rangi2)
lines(log.mass.seq, mu.mean)
lines(log.mass.seq, mu.PI[1,], lty = 2)
lines(log.mass.seq, mu.PI[2,], lty=2)
setwd("C:\\Users\\Chris\\Desktop\\Statistical-Rethinking-Solutions\\Chapter 5 - Multivariate Linear Models")
num <- 1e4
x.real <- rnorm(n = num, mean = 1, sd = 1)
x.spurious <- rnorm(n = num, mean = x.real)
y <- rnorm(n = num, mean = x.real)
df <- data.frame(y = y, x.real = x.real, x.spurious = x.spurious)
pairs(df)
model <- lm(y ~ x.real.correlation + x.spurious.correlation)
precis(model)
# set the global chunk options
opts_chunk$set(message=FALSE, # don't print R messages in pdf -- CHANGE TO FALSE WHEN SUBMITTING FINAL VERSION!!!
warning=FALSE) # don't print warnings in pdf -- CHANGE TO FALSE WHEN SUBMITTING FINAL VERSION!!!
# load .RData files, .R files, etc.
# R packages required
suppressMessages(library(xtable, quietly=TRUE, warn.conflicts = FALSE,verbose = FALSE))
suppressMessages(library(tidyverse, quietly=TRUE, warn.conflicts = FALSE, verbose=FALSE))
suppressMessages(library(rethinking, quietly=TRUE, warn.conflicts = FALSE, verbose=FALSE))
num <- 1e4
x.real <- rnorm(n = num, mean = 1, sd = 1)
x.spurious <- rnorm(n = num, mean = x.real)
y <- rnorm(n = num, mean = x.real)
df <- data.frame(y = y, x.real = x.real, x.spurious = x.spurious)
pairs(df)
model <- lm(y ~ x.real + x.spurious.correlation)
precis(model)
num <- 1e4
x.real <- rnorm(n = num, mean = 1, sd = 1)
x.spurious <- rnorm(n = num, mean = x.real)
y <- rnorm(n = num, mean = x.real)
df <- data.frame(y = y, x.real = x.real, x.spurious = x.spurious)
pairs(df)
model <- lm(y ~ x.real + x.spurious)
precis(model)
N <- 1e4
rho <- 0.7
x.pos <- rnorm(N)
x.neg <- rnorm(N, rho*x.pos, sqrt(1-rho^2))
y <- rnorm(N, x.pos - x.neg)
df <- data.frame(y = y, x.pos = x.pos, x.neg = x.neg)
pairs(df)
model <- lm(y ~ x.pos + x.neg)
precis(model)
